// Simple tests for commit-buddy
// Generated by commit-buddy

use commit_buddy::config::*;
use commit_buddy::ai::*;
use anyhow::Result;

#[tokio::test]
async fn test_config_loading() -> Result<()> {
    let config = Config::load()?;
    assert_eq!(config.get_default_branch(), "master");
    Ok(())
}

#[tokio::test]
async fn test_config_defaults() -> Result<()> {
    let config = Config {
        default_branch: "master".to_string(),
        openai_api_key: None,
        github_token: None,
    };
    
    assert_eq!(config.get_default_branch(), "master");
    assert!(!config.has_openai_key());
    Ok(())
}

#[tokio::test]
async fn test_config_with_api_key() -> Result<()> {
    let config = Config {
        default_branch: "master".to_string(),
        openai_api_key: Some("test_key".to_string()),
        github_token: None,
    };
    
    assert!(config.has_openai_key());
    Ok(())
}

#[tokio::test]
async fn test_ai_fallback() -> Result<()> {
    let config = Config {
        default_branch: "master".to_string(),
        openai_api_key: None,
        github_token: None,
    };
    
    let result = call_openai_api("test", "test", &config).await?;
    assert!(result.contains("ðŸ¤– AI Feature Unavailable"));
    Ok(())
}

#[tokio::test]
async fn test_ai_with_invalid_key() -> Result<()> {
    let config = Config {
        default_branch: "master".to_string(),
        openai_api_key: Some("invalid_key".to_string()),
        github_token: None,
    };
    
    // This should fail with an API error
    let result = call_openai_api("test", "test", &config).await;
    assert!(result.is_err());
    Ok(())
}
